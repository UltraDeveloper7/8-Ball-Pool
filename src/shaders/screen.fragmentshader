#version 440
in vec2 vUV; out vec4 FragColor;

uniform sampler2D src;
uniform vec4  tint;       // rgb + intensity (a)
uniform float vignette;   // 0..1

// Optional extras (all default to off/no-op if set to 0 or 1 as indicated)
uniform float aberration; // pixels of RGB split at image edge (0..~2). 0 = off
uniform float sharpen;    // 0..1, 0 = off
uniform float grain;      // 0..1, 0 = off
uniform float scanlines;  // 0..1, 0 = off
uniform float saturation; // 0..2, 1 = neutral
uniform float contrast;   // 0..2, 1 = neutral
uniform float gamma;      // 0.1..3, 1 = neutral
uniform float time;       // seconds, for animated grain

float luma(vec3 c) { return dot(c, vec3(0.299, 0.587, 0.114)); }

// Cheap hash for grain
float hash21(vec2 p) {
    p = fract(p * vec2(123.34, 456.21));
    p += dot(p, p + 34.45);
    return fract(p.x * p.y);
}

void main() {
    ivec2 sz  = textureSize(src, 0);
    vec2 texel = 1.0 / vec2(sz);

    // Base sample
    vec3 col = texture(src, vUV).rgb;

    // Optional tint
    col = mix(col, tint.rgb, tint.a);

    // Radial vignette (original)
    vec2 p = vUV * 2.0 - 1.0;
    float r2 = dot(p, p);                // 0 center → ~2 corners
    float v = smoothstep(1.2, 0.2, 1.0 - r2);
    col *= mix(1.0, v, clamp(vignette, 0.0, 1.0));

    // Chromatic aberration (RGB split increases toward edges)
    if (aberration > 0.0) {
        float edge = clamp(length(p), 0.0, 1.0);
        vec2 offs = p * (aberration * edge) * texel; // aberration in px at edge
        vec3 ca;
        ca.r = texture(src, vUV + offs).r;
        ca.g = texture(src, vUV).g;
        ca.b = texture(src, vUV - offs).b;
        // Blend stronger near edges, gentle toward center
        float w = smoothstep(0.0, 1.0, edge);
        col = mix(col, ca, w);
    }

    // Unsharp mask (sharpen): quick 5-tap kernel
    if (sharpen > 0.0) {
        vec3 c  = texture(src, vUV).rgb;
        vec3 cx = texture(src, vUV + vec2(texel.x, 0)).rgb
                + texture(src, vUV - vec2(texel.x, 0)).rgb;
        vec3 cy = texture(src, vUV + vec2(0, texel.y)).rgb
                + texture(src, vUV - vec2(0, texel.y)).rgb;
        vec3 k = c * 5.0 - (cx + cy);
        col = mix(col, k, clamp(sharpen, 0.0, 1.0));
    }

    // Film grain (animated)
    if (grain > 0.0) {
        // Use different seeds per-channel for subtle color variation
        float n  = hash21(vUV * vec2(sz) + time * 37.23);
        float n2 = hash21(vUV * vec2(sz) * 1.91 + time * 53.1);
        float n3 = hash21(vUV * vec2(sz) * 2.71 + time * 41.7);
        vec3 g = vec3(n, n2, n3) - 0.5;
        // Luminance-preserving grain: scale more in midtones
        float lum = luma(col);
        float gain = smoothstep(0.05, 0.95, lum) * 0.75 + 0.25;
        col += g * (grain * 0.07) * gain; // ~7% peak amplitude at grain=1
    }

    // Scanlines (horizontal modulation)
    if (scanlines > 0.0) {
        float line = 0.5 + 0.5 * cos(float(sz.y) * vUV.y * 3.14159265);
        col *= mix(1.0, mix(0.9, 1.0, line), clamp(scanlines, 0.0, 1.0));
    }

    // Color controls
    // Saturation
    if (abs(saturation - 1.0) > 1e-4) {
        float Y = luma(col);
        col = mix(vec3(Y), col, clamp(saturation, 0.0, 2.0));
    }
    // Contrast
    if (abs(contrast - 1.0) > 1e-4) {
        col = (col - 0.5) * contrast + 0.5;
    }
    // Gamma
    if (abs(gamma - 1.0) > 1e-4) {
        col = pow(max(col, 0.0), vec3(1.0 / max(gamma, 0.0001)));
    }

    FragColor = vec4(clamp(col, 0.0, 1.0), 1.0);
}